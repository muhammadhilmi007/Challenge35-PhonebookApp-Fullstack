import React, { useRef, useCallback } from 'react';
import ContactCard from './ContactCard';

const ContactList = ({ 
  contacts, 
  onEdit, 
  onDelete, 
  onAvatarUpdate, 
  onLoadMore,
  loading,
  hasMore 
}) => {
  // Reference for the last contact element
  const observer = useRef();
  
  // Callback ref for infinite scroll
  const lastContactRef = useCallback(node => {
    if (loading) return;
    
    // Disconnect previous observer
    if (observer.current) {
      observer.current.disconnect();
    }
    
    // Create new observer
    observer.current = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting && hasMore) {
        onLoadMore();
      }
    });
    
    // Observe new node
    if (node) {
      observer.current.observe(node);
    }
  }, [loading, hasMore, onLoadMore]);

  return (
    <div className="contact-list">
      {contacts.map((contact, index) => (
        <div
          key={contact.id}
          ref={index === contacts.length - 1 ? lastContactRef : null}
        >
          <ContactCard
            contact={contact}
            onEdit={onEdit}
            onDelete={onDelete}
            onAvatarUpdate={onAvatarUpdate}
          />
        </div>
      ))}
      {loading && (
        <div className="loading-indicator">
          <div className="spinner"></div>
          <p>Loading more contacts...</p>
        </div>
      )}
    </div>
  );
};

export default ContactList;